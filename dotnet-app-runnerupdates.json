[
    {
        "UpdateStageName": "App Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd dotnet-app-runner && rm -rf srv >/dev/null 2>&1; DownloadSource=\\\"{{DownloadSource}}\\\"; DownloadBranch=\\\"{{DownloadBranch}}\\\"; [[ -n \\\"{{DownloadUsername}}\\\" ]] && DownloadUrl=\\\"${DownloadSource/https:\\/\\//https:\\/\\/{{DownloadUsername}}:{{DownloadPassword}}@}\\\" || DownloadUrl=\\\"$DownloadSource\\\"; [ ! -d app/.git ] && { echo \\\"Installing the app\\\" && git clone \\\"$DownloadUrl\\\" srv >/dev/null && \\cp -r srv/. app/ >/dev/null 2>&1 && rm -rf srv >/dev/null 2>&1 && cd app && git fetch --all >/dev/null && [ -z \\\"$DownloadBranch\\\" ] && DownloadBranch=$(/usr/bin/git symbolic-ref refs/remotes/origin/HEAD | sed \\\"s|.*/||\\\"); git checkout $DownloadBranch --force >/dev/null && echo \\\"App installed\\\"; } || { echo \\\"Updating the app\\\" && cd app && git fetch --all >/dev/null && [ -z \\\"$DownloadBranch\\\" ] && DownloadBranch=$(/usr/bin/git symbolic-ref refs/remotes/origin/HEAD | sed \\\"s|.*/||\\\"); git checkout $DownloadBranch --force >/dev/null && echo \\\"App updated\\\"; }\"",
        "UpdateSourceConditionSetting": "DownloadType",
        "UpdateSourceConditionValue": "GitRepo",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "App Download",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; cd dotnet-app-runner; Remove-Item srv -Recurse -Force -ErrorAction SilentlyContinue | Out-Null; $DownloadSource = \\\"{{DownloadSource}}\\\"; $DownloadBranch = \\\"{{DownloadBranch}}\\\"; if (![string]::IsNullOrEmpty(\\\"{{DownloadUsername}}\\\")) { $DownloadUrl = $DownloadSource -replace \\\"https://\\\", \\\"https://{{DownloadUsername}}:{{DownloadPassword}}@\\\" } else { $DownloadUrl = \\\"$DownloadSource\\\" }; if (-Not (Test-Path app/.git)) { Write-Output \\\"Installing the app\\\"; git clone \\\"$DownloadUrl\\\" srv 1> $null; Copy-Item srv/* app/ -Recurse -Force -ErrorAction SilentlyContinue | Out-Null; Remove-Item srv -Recurse -Force -ErrorAction SilentlyContinue | Out-Null; cd app; if ([string]::IsNullOrEmpty($DownloadBranch)) { $DownloadBranch = (git symbolic-ref refs/remotes/origin/HEAD) -replace '.*/' }; git checkout --force $DownloadBranch 1> $null; if ($?) { Write-Output \\\"App installed\\\" } } else { Write-Output \\\"Updating the app\\\"; cd app; git fetch --all 1> $null; if ([string]::IsNullOrEmpty($DownloadBranch)) { $DownloadBranch = (git symbolic-ref refs/remotes/origin/HEAD) -replace '.*/' }; git checkout --force $DownloadBranch 1> $null; if ($?) { Write-Output \\\"App updated\\\" } }\"",
        "UpdateSourceConditionSetting": "DownloadType",
        "UpdateSourceConditionValue": "GitRepo",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "App Download",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "GithubRelease",
        "UpdateSourceArgs": "{{DownloadSource}}",
        "UpdateSourceData": "{{DownloadFilename}}",
        "UpdateSourceVersion": "{{DownloadVersion}}",
        "UpdateSourceTarget": "{{$FullBaseDir}}",
        "UnzipUpdateSource": true,
        "OverwriteExistingFiles": true,
        "DeleteAfterExtract": true,
        "UpdateSourceConditionSetting": "DownloadType",
        "UpdateSourceConditionValue": "GithubRelease"
    },
    {
        "UpdateStageName": "App Download",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "FetchURL",
        "UpdateSourceData": "{{DownloadSource}}",
        "UpdateSourceTarget": "{{$FullBaseDir}}",
        "UnzipUpdateSource": true,
        "OverwriteExistingFiles": true,
        "DeleteAfterExtract": true,
        "UpdateSourceConditionSetting": "DownloadType",
        "UpdateSourceConditionValue": "DownloadURL"
    },
    {
        "UpdateStageName": "Create Dotnet Directory",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullRootDir}}dotnet"
    },
    {
        "UpdateStageName": ".NET SDK Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "x86_64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"CurrentVersion={{CurrentVersion}} && if [[ -z \\\"$CurrentVersion\\\" ]]; then { $CurrentVersion=$(wget -qO- https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/{{DotnetRelease}}/releases.json | jq -r \\\".latest-sdk\\\") && wget -qO dotnet.tar.gz https://dotnetcli.azureedge.net/dotnet/Sdk/$CurrentVersion/dotnet-sdk-$CurrentVersion-linux-x64.tar.gz && echo \\\".NET SDK v$CurrentVersion downloaded\\\"; } elif [[ \\\"$CurrentVersion\\\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then { wget -qO dotnet.tar.gz https://dotnetcli.azureedge.net/dotnet/Sdk/$CurrentVersion/dotnet-sdk-$CurrentVersion-linux-x64.tar.gz && echo \\\".NET SDK v$CurrentVersion downloaded\\\"; } else { echo \\\"Invalid .NET SDK version specified\\\" && exit 1; }\"",
        "UpdateSourceConditionSetting": "DisableDotnetDownload",
        "UpdateSourceConditionValue": "false",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": ".NET SDK Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "aarch64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"CurrentVersion={{CurrentVersion}} && if [[ -z \\\"$CurrentVersion\\\" ]]; then { $CurrentVersion=$(wget -qO- https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/{{DotnetRelease}}/releases.json | jq -r \\\".latest-sdk\\\") && wget -qO dotnet.tar.gz https://dotnetcli.azureedge.net/dotnet/Sdk/$CurrentVersion/dotnet-sdk-$CurrentVersion-linux-arm64.tar.gz && echo \\\".NET SDK v$CurrentVersion downloaded\\\"; } elif [[ \\\"$CurrentVersion\\\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then { wget -qO dotnet.tar.gz https://dotnetcli.azureedge.net/dotnet/Sdk/$CurrentVersion/dotnet-sdk-$CurrentVersion-linux-arm64.tar.gz && echo \\\".NET SDK v$CurrentVersion downloaded\\\"; } else { echo \\\"Invalid .NET SDK version specified\\\" && exit 1; }\"",
        "UpdateSourceConditionSetting": "DisableDotnetDownload",
        "UpdateSourceConditionValue": "false",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": ".NET SDK Download",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; $CurrentVersion='{{CurrentVersion}}'; if ([string]::IsNullOrWhiteSpace($CurrentVersion)) { $CurrentVersion=(Invoke-WebRequest -UseBasicParsing -Uri https://dotnetcli.blob.core.windows.net/dotnet/release-metadata/{{DotnetRelease}}/releases.json).Content | ConvertFrom-Json | Select-Object -ExpandProperty latest-sdk; Invoke-WebRequest -UseBasicParsing -Uri https://dotnetcli.azureedge.net/dotnet/Sdk/$CurrentVersion/dotnet-sdk-$CurrentVersion-win-x64.zip -OutFile 'dotnet.zip'; if ($?) { Write-Output \\\".NET SDK v$CurrentVersion downloaded\\\" } } elseif ($CurrentVersion -match '^\\d+\\.\\d+\\.\\d+$') { Invoke-WebRequest -UseBasicParsing -Uri https://dotnetcli.azureedge.net/dotnet/Sdk/$CurrentVersion/dotnet-sdk-$CurrentVersion-win-x64.zip -OutFile 'dotnet.zip'; if ($?) { Write-Output \\\".NET SDK v$CurrentVersion downloaded\\\" } } else { Write-Output \\\"Invalid .NET SDK version specified\\\"; exit 1 }\"",
        "UpdateSourceConditionSetting": "DisableDotnetDownload",
        "UpdateSourceConditionValue": "false",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Compile App",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd dotnet-app-runner/app/{{DownloadLocation}} && export DOTNET_ROOT=\\\"{{$FullRootDir}}dotnet\\\" && \\\"{{$FullRootDir}}dotnet/dotnet\\\" build {{CompileArgs}} {{CompileTarget}}\"",
        "UpdateSourceConditionSetting": "CompileMode",
        "UpdateSourceConditionValue": "build",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Compile App",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "cmd.exe",
        "UpdateSourceArgs": "/C cd dotnet-app-runner\\app\\{{DownloadLocation}} && set \"DOTNET_ROOT={{$FullRootDir}}dotnet\" && \"{{$FullRootDir}}dotnet\\dotnet.exe\" build {{CompileArgs}} {{CompileTarget}}",
        "UpdateSourceConditionSetting": "CompileMode",
        "UpdateSourceConditionValue": "build",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Compile App",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd dotnet-app-runner/app/{{DownloadLocation}} && export DOTNET_ROOT=\\\"{{$FullRootDir}}dotnet\\\" && \\\"{{$FullRootDir}}dotnet/dotnet\\\" publish {{CompileArgs}} {{CompileTarget}}\"",
        "UpdateSourceConditionSetting": "CompileMode",
        "UpdateSourceConditionValue": "publish",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Compile App",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "cmd.exe",
        "UpdateSourceArgs": "/C cd dotnet-app-runner\\app\\{{DownloadLocation}} && set \"DOTNET_ROOT={{$FullRootDir}}dotnet\" && \"{{$FullRootDir}}dotnet\\dotnet.exe\" publish {{CompileArgs}} {{CompileTarget}}",
        "UpdateSourceConditionSetting": "CompileMode",
        "UpdateSourceConditionValue": "publish",
        "SkipOnFailure": false
    }
]
