[
    {
        "UpdateStageName": "Create Dotnet Directory",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullRootDir}}dotnet"
    },
    {
        "UpdateStageName": ".NET Runtime Download",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; $DotnetVersion=(Invoke-RestMethod -UseBasicParsing -Uri https://builds.dotnet.microsoft.com/dotnet/release-metadata/8.0/releases.json).\\\"latest-runtime\\\"; if ($?) { Invoke-WebRequest -UseBasicParsing -Uri https://builds.dotnet.microsoft.com/dotnet/Runtime/$DotnetVersion/dotnet-runtime-$DotnetVersion-win-x64.zip -OutFile 'dotnet.zip' }; if ($?) { Write-Output \\\".NET Runtime v$DotnetVersion downloaded\\\" }\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": ".NET Runtime Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"DotnetVersion=$(wget -qO- https://builds.dotnet.microsoft.com/dotnet/release-metadata/8.0/releases.json | jq -r \\\".[\\\\\\\"latest-runtime\\\\\\\"]\\\") && wget -qO dotnet.tar.gz https://builds.dotnet.microsoft.com/dotnet/Runtime/$DotnetVersion/dotnet-runtime-$DotnetVersion-linux-x64.tar.gz && echo \\\".NET Runtime v$DotnetVersion downloaded\\\"\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": ".NET Runtime Extract",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "ExtractArchive",
        "UpdateSourceData": "dotnet.zip",
        "UpdateSourceTarget": "{{$FullRootDir}}dotnet",
        "OverwriteExistingFiles": true,
        "DeleteAfterExtract": true,
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": ".NET Runtime Extract",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "ExtractArchive",
        "UpdateSourceData": "dotnet.tar.gz",
        "UpdateSourceTarget": "{{$FullRootDir}}dotnet",
        "OverwriteExistingFiles": true,
        "DeleteAfterExtract": true,
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Server Download",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; $BaseUrl=\"https://nightly.link/Crypto137/MHServerEmu/workflows/nightly-release-windows-x64/master\"; $html = Invoke-WebRequest -Uri \\\"${BaseUrl}?preview\\\" -UseBasicParsing; $null = $html.Content -match 'href=\\\"[^\\\"]*(MHServerEmu-nightly-[^\\\"]*-windows-x64\\.zip)\\\"'; $FileName = $matches[1]; Invoke-WebRequest -UseBasicParsing -Uri \\\"${BaseUrl}/${FileName}\\\" -OutFile 'nightly.zip'\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Server Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"BaseUrl=\"https://nightly.link/Crypto137/MHServerEmu/workflows/nightly-release-linux-x64/master\"; FileName=$(wget -qO- \\\"${BaseUrl}?preview\\\" | sed -n \\\"s/.*href=\\\\\\\"[^\\\\\\\"]*\\(MHServerEmu-nightly-[^\\\\\\\"]*\\.zip\\)\\\\\\\".*/\\1/p\\\" | head -n1); wget -qO nightly.zip \\\"${BaseUrl}/${FileName}\\\"\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Server Extract",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "ExtractArchive",
        "UpdateSourceData": "nightly.zip",
        "UpdateSourceTarget": "{{$FullBaseDir}}",
        "OverwriteExistingFiles": true,
        "DeleteAfterExtract": true
    }
]