[
    {
        "UpdateStageName": "Create Dotnet Directory",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "CreateDirectory",
        "UpdateSourceArgs": "{{$FullBaseDir}}Dotnet"
    },
    {
        "UpdateStageName": ".NET Runtime Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "x86_64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"DotnetVersion=\\\"{{DotnetVersion}}\\\" && if [[ -z \\\"$DotnetVersion\\\" ]]; then DotnetVersion=$(wget -qO- https://builds.dotnet.microsoft.com/dotnet/release-metadata/{{DotnetRelease}}/releases.json | jq -r \\\".[\\\\\\\"latest-runtime\\\\\\\"]\\\"); fi && if [[ ! \\\"$DotnetVersion\\\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then echo \\\"Invalid .NET Runtime version format specified\\\" && exit 1; fi && wget -qO dotnet.tar.gz https://builds.dotnet.microsoft.com/dotnet/Runtime/$DotnetVersion/dotnet-runtime-$DotnetVersion-linux-x64.tar.gz && echo \\\".NET Runtime v$DotnetVersion downloaded\\\"\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": ".NET Runtime Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "aarch64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"DotnetVersion=\\\"{{DotnetVersion}}\\\" && if [[ -z \\\"$DotnetVersion\\\" ]]; then DotnetVersion=$(wget -qO- https://builds.dotnet.microsoft.com/dotnet/release-metadata/{{DotnetRelease}}/releases.json | jq -r \\\".[\\\\\\\"latest-runtime\\\\\\\"]\\\"); fi && if [[ ! \\\"$DotnetVersion\\\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+$ ]]; then echo \\\"Invalid .NET Runtime version format specified\\\" && exit 1; fi && wget -qO dotnet.tar.gz https://builds.dotnet.microsoft.com/dotnet/Runtime/$DotnetVersion/dotnet-runtime-$DotnetVersion-linux-arm64.tar.gz && echo \\\".NET Runtime v$DotnetVersion downloaded\\\"\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": ".NET Runtime Download",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $DotnetVersion='{{DotnetVersion}}'; if ([string]::IsNullOrWhiteSpace($DotnetVersion)) { $DotnetVersion=(Invoke-RestMethod -UseBasicParsing -Uri https://builds.dotnet.microsoft.com/dotnet/release-metadata/{{DotnetRelease}}/releases.json).\\\"latest-runtime\\\" }; if ($DotnetVersion -notmatch '^\\d+\\.\\d+\\.\\d+$') { Write-Output \\\"Invalid .NET Runtime version format specified\\\"; exit 1 }; Invoke-WebRequest -UseBasicParsing -Uri https://builds.dotnet.microsoft.com/dotnet/Runtime/$DotnetVersion/dotnet-runtime-$DotnetVersion-win-x64.zip -OutFile 'dotnet.zip'; if ($?) { Write-Output \\\".NET Runtime v$DotnetVersion downloaded\\\" }\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": ".NET Runtime Extract",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "ExtractArchive",
        "UpdateSourceData": "dotnet.tar.gz",
        "UpdateSourceTarget": "{{$FullBaseDir}}Dotnet",
        "OverwriteExistingFiles": true,
        "DeleteAfterExtract": true,
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": ".NET Runtime Extract",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "ExtractArchive",
        "UpdateSourceData": "dotnet.zip",
        "UpdateSourceTarget": "{{$FullBaseDir}}Dotnet",
        "OverwriteExistingFiles": true,
        "DeleteAfterExtract": true,
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Server Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "x86_64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"DownloadURL=$(wget -qO- https://wizards.cdn.spacestation14.com/fork/wizards/manifest | jq -r \\\".builds | to_entries | sort_by(.value.time) | last | .value.server.\\\\\\\"linux-x64\\\\\\\".url\\\") && wget -qO SS14.Server.zip $DownloadURL && echo \\\"Latest Space Station 14 build downloaded\\\"\"",
        "UpdateSourceConditionSetting": "ServerBuild",
        "UpdateSourceConditionValue": "latest",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Server Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "aarch64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"DownloadURL=$(wget -qO- https://wizards.cdn.spacestation14.com/fork/wizards/manifest | jq -r \\\".builds | to_entries | sort_by(.value.time) | last | .value.server.\\\\\\\"linux-arm64\\\\\\\".url\\\") && wget -qO SS14.Server.zip $DownloadURL && echo \\\"Latest Space Station 14 build downloaded\\\"\"",
        "UpdateSourceConditionSetting": "ServerBuild",
        "UpdateSourceConditionValue": "latest",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Server Download",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; $Manifest=Invoke-RestMethod -UseBasicParsing -Uri https://wizards.cdn.spacestation14.com/fork/wizards/manifest; $DownloadURL=($Manifest.builds.PSObject.Properties | ForEach-Object { [pscustomobject]@{ Time = [datetime]$_.Value.time; Url = $_.Value.server.'win-x64'.url } } | Sort-Object Time | Select-Object -Last 1).Url; Invoke-WebRequest -UseBasicParsing -Uri $DownloadURL -OutFile 'SS14.Server.zip'; if ($?) { Write-Output \\\"Latest Space Station 14 build downloaded\\\" }\"",
        "UpdateSourceConditionSetting": "ServerBuild",
        "UpdateSourceConditionValue": "latest",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Server Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "x86_64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"wget -qO SS14.Server.zip https://wizards.cdn.spacestation14.com/fork/wizards/version/{{SpecificBuildVersion}}/file/SS14.Server_linux-x64.zip && echo \\\"Space Station 14 build {{SpecificBuildVersion}} downloaded\\\"\"",
        "UpdateSourceConditionSetting": "ServerBuild",
        "UpdateSourceConditionValue": "specificversion",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Server Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "aarch64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"wget -qO SS14.Server.zip https://wizards.cdn.spacestation14.com/fork/wizards/version/{{SpecificBuildVersion}}/SS14.Server_linux-arm64.zip && echo \\\"Space Station 14 build {{SpecificBuildVersion}} downloaded\\\"\"",
        "UpdateSourceConditionSetting": "ServerBuild",
        "UpdateSourceConditionValue": "specificversion",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Server Download",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Invoke-WebRequest -UseBasicParsing -Uri https://wizards.cdn.spacestation14.com/fork/wizards/version/{{SpecificBuildVersion}}/SS14.Server_win-x64.zip -OutFile 'SS14.Server.zip'; if ($?) { Write-Output \\\"Space Station 14 build {{SpecificBuildVersion}} downloaded\\\" }\"",
        "UpdateSourceConditionSetting": "ServerBuild",
        "UpdateSourceConditionValue": "specificversion",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Server Extract",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "ExtractArchive",
        "UpdateSourceData": "SS14.Server.zip",
        "UpdateSourceTarget": "{{$FullBaseDir}}",
        "OverwriteExistingFiles": true,
        "DeleteAfterExtract": true,
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Make Server Executable",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "SetExecutableFlag",
        "UpdateSourceArgs": "{{$FullBaseDir}}Robust.Server"
    },
    {
        "UpdateStageName": "Config File Download",
        "UpdateSourcePlatform": "All",
        "UpdateSource": "FetchURL",
        "UpdateSourceData": "https://raw.githubusercontent.com/Greelan/AMPTemplates/dev/space-station14server_config.toml",
        "UpdateSourceTarget": "{{$FullBaseDir}}",
        "UpdateSourceArgs": "AMP_server_config.toml",
        "OverwriteExistingFiles": false
    }
]