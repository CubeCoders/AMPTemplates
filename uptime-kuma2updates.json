[
    {
        "UpdateStageName": "Node.js Download",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "FetchURL",
        "UpdateSourceData": "https://nodejs.org/download/release/v20.18.2/node-v20.18.2-win-x64.zip",
        "UpdateSourceTarget": "{{$FullRootDir}}",
        "UnzipUpdateSource": true,
        "OverwriteExistingFiles": true,
        "DeleteAfterExtract": true,
        "OneShot": true
    },
    {
        "UpdateStageName": "Node.js Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "x86_64",
        "UpdateSource": "FetchURL",
        "UpdateSourceData": "https://nodejs.org/download/release/v20.18.2/node-v20.18.2-linux-x64.tar.gz",
        "UpdateSourceTarget": "{{$FullRootDir}}",
        "OverwriteExistingFiles": true,
        "OneShot": true
    },
    {
        "UpdateStageName": "Node.js Download",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "aarch64",
        "UpdateSource": "FetchURL",
        "UpdateSourceData": "https://nodejs.org/download/release/v20.18.2/node-v20.18.2-linux-arm64.tar.gz",
        "UpdateSourceTarget": "{{$FullRootDir}}",
        "OverwriteExistingFiles": true,
        "OneShot": true
    },
    {
        "UpdateStageName": "Node.js Extract",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"Set-Location -Path 'uptime-kuma'; Remove-Item node -Recurse -Force -ErrorAction SilentlyContinue | Out-Null; Rename-Item -Path node-v20.18.2-win-x64 -NewName node; if ($?) { Write-Output \\\"Node.js v20.18.2 installed.\\\" }\"",
        "SkipOnFailure": false,
        "OneShot": true
    },
    {
        "UpdateStageName": "Node.js Extract",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "x86_64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd uptime-kuma && rm -rf node >/dev/null 2>&1 && tar xfv node-v20.18.2-linux-x64.tar.gz >/dev/null 2>&1 && mv node-v20.18.2-linux-x64 node >/dev/null 2>&1 && rm node-v20.18.2-linux-x64.tar.gz && echo \\\"Node.js v20.18.2 installed.\\\"\"",
        "SkipOnFailure": false,
        "OneShot": true
    },
    {
        "UpdateStageName": "Node.js Extract",
        "UpdateSourcePlatform": "Linux",
        "UpdateSourceArch": "aarch64",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd uptime-kuma && rm -rf node >/dev/null 2>&1 && tar xfv node-v20.18.2-linux-arm64.tar.gz >/dev/null 2>&1 && mv node-v20.18.2-linux-arm64 node >/dev/null 2>&1 && rm node-v20.18.2-linux-arm64.tar.gz && echo \\\"Node.js v20.18.2 installed.\\\"\"",
        "SkipOnFailure": false,
        "OneShot": true
    },
    {
        "UpdateStageName": "Uptime Kuma Installation",
        "UpdateSourcePlatform": "Windows",
        "UpdateSource": "Executable",
        "UpdateSourceData": "powershell.exe",
        "UpdateSourceArgs": "-NoProfile -Command \"$ProgressPreference='SilentlyContinue'; [Net.ServicePointManager]::SecurityProtocol = [Net.SecurityProtocolType]::Tls12; Set-Location -Path 'uptime-kuma'; Remove-Item srv -Recurse -Force -ErrorAction SilentlyContinue | Out-Null; if ($ReleaseVersion -notmatch '^\\d+\\.\\d+\\.\\d+(-beta\\.\\d+)?$') { Write-Output \\\"Invalid Uptime Kuma 2 release version format specified\\\"; exit 1; } elseif (-Not (Test-Path server/.git)) { Write-Output \\\"Installing Uptime Kuma.\\\"; git clone https://github.com/louislam/uptime-kuma.git srv 1> $null; Copy-Item srv/* server/ -Recurse -Force -ErrorAction SilentlyContinue | Out-Null; Remove-Item srv -Recurse -Force -ErrorAction SilentlyContinue | Out-Null; Set-Location -Path 'server'; git checkout --force $ReleaseVersion 1> $null; $env:PATH='{{$FullRootDir}}node;' + $env:PATH; & node ../node/node_modules/npm/bin/npm-cli.js run setup 1> $null; if ($?) { Write-Output \\\"Uptime Kuma v${ReleaseVersion} installed.\\\" } } else { Write-Output \\\"Updating Uptime Kuma.\\\"; Set-Location -Path 'server'; git fetch --all 1> $null; git checkout --force $ReleaseVersion 1> $null; $env:PATH='{{$FullRootDir}}node;' + $env:PATH; & node ../node/node_modules/npm/bin/npm-cli.js install --production 1> $null; & node ../node/node_modules/npm/bin/npm-cli.js run download-dist 1> $null; if ($?) { Write-Output \\\"Uptime Kuma updated to v${ReleaseVersion}.\\\" } }\"",
        "SkipOnFailure": false
    },
    {
        "UpdateStageName": "Uptime Kuma Installation",
        "UpdateSourcePlatform": "Linux",
        "UpdateSource": "Executable",
        "UpdateSourceData": "/bin/bash",
        "UpdateSourceArgs": "-c \"cd uptime-kuma && rm -rf srv >/dev/null 2>&1; ReleaseVersion=\\\"{{ReleaseVersion}}\\\" && if [[ ! \\\"$ReleaseVersion\\\" =~ ^[0-9]+\\.[0-9]+\\.[0-9]+(-beta\\.[0-9]+)?$ ]]; then echo \\\"Invalid Uptime Kuma release version format specified\\\" && exit 1; elif [[ ! -d server/.git ]] then echo \\\"Installing Uptime Kuma.\\\"; git clone https://github.com/louislam/uptime-kuma.git srv >/dev/null && cp -r srv/. server/ >/dev/null 2>&1 && rm -rf srv >/dev/null 2>&1 && cd server && git checkout $ReleaseVersion --force >/dev/null && export PATH=\\\"{{$FullRootDir}}node/bin:$PATH\\\" && npm run setup >/dev/null && echo \\\"Uptime Kuma v${ReleaseVersion} installed.\\\"; else echo \\\"Updating Uptime Kuma.\\\" && cd server && git fetch --all >/dev/null && git checkout $ReleaseVersion --force >/dev/null && export PATH=\\\"{{$FullRootDir}}node/bin:$PATH\\\" && npm install --production >/dev/null && npm run download-dist >/dev/null && echo \\\"Uptime Kuma updated to v${ReleaseVersion}.\\\"; fi\"",
        "SkipOnFailure": false
    }
]